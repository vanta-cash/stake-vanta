"use client"

import type React from "react"

import { useState, useEffect } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { ArrowLeft, Shield, Clock, Zap, Copy, QrCode, Check, AlertCircle, ArrowDown } from "lucide-react"
import { TerminalConsole } from "@/components/terminal-console"
import { SolanaLogo } from "@/components/solana-logo"

export default function MixPage() {
  const [token, setToken] = useState("SOL")
  const [amount, setAmount] = useState("1.00")
  const [delay, setDelay] = useState("no delay")
  const [obfuscationLevel, setObfuscationLevel] = useState(2)
  const [targetAddress, setTargetAddress] = useState("")
  const [isProcessing, setIsProcessing] = useState(false)
  const [isHovering, setIsHovering] = useState<string | null>(null)
  const [mixStage, setMixStage] = useState<"form" | "qr">("form")
  const [copied, setCopied] = useState(false)
  const [amountError, setAmountError] = useState(false)
  const [waitingDeposit, setWaitingDeposit] = useState(false)
  const [showConsole, setShowConsole] = useState(false)

  // Solana deposit address (would be generated by backend in real app)
  const depositAddress = "8xj7Y2eHvmGQM5KQ5bUAGKmJYLvGCGiH99GfPRvHfP6q"

  // Animated timer countdown
  const [timeRemaining, setTimeRemaining] = useState(60) // 60 seconds

  useEffect(() => {
    if (isProcessing && timeRemaining > 0) {
      const timer = setTimeout(() => {
        setTimeRemaining((prev) => prev - 1)
      }, 1000)
      return () => clearTimeout(timer)
    }
  }, [isProcessing, timeRemaining])

  // Validate minimum amount
  useEffect(() => {
    const numAmount = Number.parseFloat(amount)
    if (numAmount < 1) {
      setAmountError(true)
    } else {
      setAmountError(false)
    }
  }, [amount])

  // Set waiting deposit state when QR screen is shown
  useEffect(() => {
    if (mixStage === "qr") {
      setWaitingDeposit(true)
      setShowConsole(true)
    } else {
      setWaitingDeposit(false)
      setIsProcessing(false)
    }
  }, [mixStage])

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    // Check minimum amount
    if (Number.parseFloat(amount) < 1) {
      setAmountError(true)
      return
    }

    setMixStage("qr")
  }

  const handleCopyAddress = () => {
    navigator.clipboard.writeText(depositAddress)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`
  }

  const getTimeDelay = (delay: string) => {
    switch (delay) {
      case "no delay":
        return "immediate processing"
      case "1h":
        return "1 hour"
      case "6h":
        return "6 hours"
      default:
        return "immediate processing"
    }
  }

  const obfuscationDetails = [
    {
      level: 1,
      title: "Basic Shuffle",
      description: "Fast transaction with basic anonymity",
      color: "from-green-400 to-emerald-600",
      icon: <Zap className="h-5 w-5" />,
      security: "Low",
    },
    {
      level: 2,
      title: "Multi-Hop Route",
      description: "Balanced security with 3-hop routing",
      color: "from-blue-400 to-cyan-600",
      icon: <Shield className="h-5 w-5" />,
      security: "Medium",
    },
    {
      level: 3,
      title: "Full Vanta Burn",
      description: "Maximum security with complete trace removal",
      color: "from-purple-500 to-fuchsia-600",
      icon: <Shield className="h-5 w-5 fill-current" />,
      security: "Maximum",
    },
  ]

  const currentObfuscation = obfuscationDetails[obfuscationLevel - 1]

  const toggleConsole = () => {
    setShowConsole(!showConsole)
  }

  return (
    <main className="min-h-screen bg-black text-white custom-cursor pt-0 sm:pt-20 pb-16">
      <div className="absolute inset-0 bg-[radial-gradient(ellipse_at_top_right,rgba(0,255,225,0.1),transparent_70%)]"></div>

      <div className="container mx-auto px-4 py-2 sm:py-8 relative">
        <div className="mb-2 sm:mb-8">
          <Button variant="ghost" asChild className="text-primary-cyan hover:text-white hover:bg-muted-dark p-1 sm:p-3">
            <Link href="/">
              <ArrowLeft className="mr-1 h-4 w-4" /> Back to Home
            </Link>
          </Button>
        </div>

        {/* Mobile Status Console Toggle */}
        <div className="md:hidden mb-2">
          <Button
            onClick={toggleConsole}
            variant="outline"
            className="w-full flex items-center justify-center gap-2 border-primary-cyan text-primary-cyan py-0.5 text-xs"
          >
            {showConsole ? "Hide Status Console" : "Show Status Console"}
            <ArrowDown className={`h-3 w-3 transition-transform ${showConsole ? "rotate-180" : ""}`} />
          </Button>
        </div>

        {/* Mobile Status Console (Conditionally Shown) */}
        {showConsole && (
          <div className="md:hidden mb-3">
            <Card className="bg-muted-dark border-muted-darker cyber-border">
              <CardHeader className="py-2 px-3">
                <CardTitle className="text-sm text-primary-cyan glow-text">Status Console</CardTitle>
              </CardHeader>
              <CardContent className="p-2">
                <TerminalConsole isProcessing={isProcessing} waitingDeposit={waitingDeposit} amount={amount} />

                <div className="mt-2 p-2 bg-muted-darker/50 rounded-md border border-primary-cyan/20">
                  <h3 className="text-xs font-bold text-primary-cyan mb-1">Security Notice</h3>
                  <p className="text-xs text-gray-400">
                    All mixing operations are performed on the Solana blockchain. Your transaction will be completely
                    anonymous and untraceable after the selected delay period.
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-8">
          {/* Mixing Form or QR Code */}
          <Card className="bg-muted-dark border-muted-darker cyber-border h-full">
            <CardHeader className="py-2 px-3 sm:py-3 sm:px-4">
              <CardTitle className="text-lg sm:text-2xl text-primary-cyan glow-text flex items-center">
                <SolanaLogo className="mr-2 h-5 w-5 sm:h-6 sm:w-6" />
                {mixStage === "form" ? "Mix Your Solana Assets" : "Deposit SOL to Start Mixing"}
              </CardTitle>
            </CardHeader>
            <CardContent className="p-3 sm:p-6">
              {mixStage === "form" ? (
                <form onSubmit={handleSubmit} className="space-y-3 sm:space-y-6">
                  <div className="space-y-1 sm:space-y-2">
                    <Label htmlFor="token">Token Type</Label>
                    <Select value={token} onValueChange={setToken}>
                      <SelectTrigger className="bg-muted-darker border-muted">
                        <SelectValue placeholder="Select token" />
                      </SelectTrigger>
                      <SelectContent className="bg-muted-darker border-muted">
                        <SelectItem value="SOL">SOL</SelectItem>
                        <SelectItem value="SPL">SPL Token</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-1 sm:space-y-2">
                    <Label htmlFor="amount" className="flex items-center">
                      Amount
                      {amountError && (
                        <span className="ml-2 text-xs text-red-500 flex items-center">
                          <AlertCircle className="h-3 w-3 mr-1" />
                          Minimum 1 SOL required
                        </span>
                      )}
                    </Label>
                    <div className="relative">
                      <Input
                        id="amount"
                        type="number"
                        placeholder="0.00"
                        value={amount}
                        onChange={(e) => setAmount(e.target.value)}
                        className={`bg-muted-darker border-muted pl-10 ${amountError ? "border-red-500" : ""}`}
                        min="1"
                        step="0.01"
                      />
                      <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                        <SolanaLogo className="h-4 w-4" />
                      </div>
                    </div>
                    <p className="text-xs text-gray-500">Minimum mix amount: 1 SOL</p>
                  </div>

                  <div className="space-y-1 sm:space-y-2">
                    <Label className="flex items-center">
                      <Clock className="mr-2 h-4 w-4 text-primary-cyan" />
                      Delay Timer
                    </Label>

                    {/* Creative Delay Timer UI */}
                    <div className="grid grid-cols-3 gap-2 sm:gap-3">
                      {["no delay", "1h", "6h"].map((option) => (
                        <div
                          key={option}
                          className={`
                          relative overflow-hidden rounded-lg cursor-pointer transition-all duration-300
                          ${
                            delay === option
                              ? "bg-gradient-to-br from-primary-cyan to-primary-cyan/70 text-black border-2 border-primary-cyan"
                              : "bg-muted-darker hover:bg-muted-dark border border-primary-cyan/30"
                          }
                        `}
                          onClick={() => setDelay(option)}
                        >
                          <div className="p-2 sm:p-3 text-center relative z-10 flex flex-col items-center">
                            <Clock
                              className={`h-5 w-5 mb-1 ${delay === option ? "text-black" : "text-primary-cyan"}`}
                            />
                            <div className={`text-sm font-bold ${delay === option ? "text-black" : "text-white"}`}>
                              {option}
                            </div>
                            <div className={`text-xs mt-1 ${delay === option ? "text-black/80" : "text-gray-400"}`}>
                              {option === "no delay" ? "Instant" : option === "1h" ? "Standard" : "Maximum"}
                            </div>
                          </div>

                          {/* Timer visualization */}
                          <div
                            className="absolute bottom-0 left-0 right-0 h-1 bg-primary-cyan/30"
                            style={{
                              width: delay === option ? "100%" : "0%",
                              transition: "width 0.5s ease",
                            }}
                          />

                          {/* Selected indicator */}
                          {delay === option && (
                            <div className="absolute top-0 right-0 w-0 h-0 border-t-8 border-r-8 border-t-primary-cyan border-r-primary-cyan"></div>
                          )}
                        </div>
                      ))}
                    </div>

                    <div className="text-xs text-gray-400 italic px-1">
                      Self-destruction after {getTimeDelay(delay)}
                    </div>
                  </div>

                  <div className="space-y-1 sm:space-y-2">
                    <Label className="flex items-center">
                      <Shield className="mr-2 h-4 w-4 text-primary-cyan" />
                      Obfuscation Level
                    </Label>

                    {/* Creative Obfuscation Level UI */}
                    <div className="bg-muted-darker rounded-lg p-3 sm:p-4 border border-muted">
                      <div className="flex items-center justify-between mb-2">
                        <div className="font-bold text-primary-cyan text-sm">{currentObfuscation.title}</div>
                        <div className="bg-muted-dark px-2 py-1 rounded text-xs">
                          Security: {currentObfuscation.security}
                        </div>
                      </div>

                      <div className="h-2 bg-muted-dark rounded-full mb-3 relative">
                        <div
                          className={`absolute top-0 left-0 h-full rounded-full bg-gradient-to-r ${currentObfuscation.color}`}
                          style={{ width: `${(obfuscationLevel / 3) * 100}%` }}
                        />

                        {/* Level markers */}
                        {[1, 2, 3].map((level) => (
                          <div
                            key={level}
                            className={`
                            absolute top-1/2 transform -translate-y-1/2 -translate-x-1/2 w-5 h-5 rounded-full 
                            flex items-center justify-center cursor-pointer transition-all duration-300
                            ${
                              level <= obfuscationLevel
                                ? "bg-gradient-to-r from-primary-cyan to-secondary-magenta"
                                : "bg-muted-dark border border-gray-600"
                            }
                          `}
                            style={{ left: `${(level / 3) * 100}%` }}
                            onClick={() => setObfuscationLevel(level)}
                            onMouseEnter={() => setIsHovering(`level-${level}`)}
                            onMouseLeave={() => setIsHovering(null)}
                          >
                            <span className={`text-xs ${level <= obfuscationLevel ? "text-black" : "text-gray-400"}`}>
                              {level}
                            </span>
                          </div>
                        ))}
                      </div>

                      {/* Level description */}
                      <div className="text-xs sm:text-sm text-gray-400">{currentObfuscation.description}</div>

                      {/* Security visualization */}
                      <div className="mt-2 grid grid-cols-3 gap-1">
                        {[1, 2, 3].map((level) => (
                          <div
                            key={level}
                            className={`
                            h-1 rounded-full transition-all duration-300
                            ${
                              level <= obfuscationLevel
                                ? level === 1
                                  ? "bg-green-500"
                                  : level === 2
                                    ? "bg-blue-500"
                                    : "bg-purple-500"
                                : "bg-gray-700"
                            }
                          `}
                          />
                        ))}
                      </div>
                    </div>
                  </div>

                  <div className="space-y-1 sm:space-y-2">
                    <Label htmlFor="address">Target Solana Address</Label>
                    <Input
                      id="address"
                      placeholder="e.g., 8xj7..."
                      value={targetAddress}
                      onChange={(e) => setTargetAddress(e.target.value)}
                      className="bg-muted-darker border-muted font-mono text-sm"
                    />
                    <p className="text-xs text-gray-500">
                      Enter the Solana wallet address that will receive the mixed tokens
                    </p>
                  </div>

                  <div className="pt-2 sm:pt-4">
                    <Button
                      type="submit"
                      className="bg-primary-cyan hover:bg-hover-blue transition-all duration-300 glow relative overflow-hidden group font-medium w-full"
                      disabled={amountError}
                    >
                      <span className="relative z-10 text-green-400">Start Mixing Process</span>
                      <span className="absolute inset-0 bg-gradient-to-r from-primary-cyan to-solana-purple opacity-0 group-hover:opacity-100 transition-opacity duration-300"></span>
                    </Button>
                  </div>
                </form>
              ) : (
                <div className="flex flex-col items-center space-y-4 sm:space-y-6">
                  {/* QR Code */}
                  <div className="bg-white p-4 rounded-lg w-40 h-40 sm:w-48 sm:h-48 relative">
                    <div className="absolute inset-0 cyberpunk-glitch"></div>
                    <QrCode size={140} className="text-black mx-auto" />
                  </div>

                  {/* Deposit Info */}
                  <div className="bg-muted-darker rounded-lg p-3 sm:p-4 w-full space-y-3 sm:space-y-4 border border-primary-cyan/30">
                    <div className="text-center space-y-1">
                      <p className="text-sm text-gray-400">Deposit exactly</p>
                      <div className="text-xl sm:text-2xl font-bold text-primary-cyan">{amount} SOL</div>
                      <p className="text-xs text-gray-500">to the address below</p>
                    </div>

                    <div className="relative">
                      <div className="bg-black/50 p-2 sm:p-3 rounded-md font-mono text-xs border border-primary-cyan/20 pr-10 break-all">
                        {depositAddress}
                      </div>
                      <button
                        className="absolute right-2 top-1/2 transform -translate-y-1/2 text-primary-cyan hover:text-white transition-colors"
                        onClick={handleCopyAddress}
                      >
                        {copied ? <Check className="h-5 w-5" /> : <Copy className="h-5 w-5" />}
                      </button>
                    </div>

                    <div className="text-center">
                      <p className="text-xs text-gray-400">Your tokens will arrive at</p>
                      <p className="text-xs font-mono text-gray-300 mt-1 break-all">{targetAddress || "..."}</p>
                    </div>

                    <div className="text-center text-xs text-gray-400">
                      after the {getTimeDelay(delay)} delay period
                    </div>
                  </div>

                  {/* Warning Notice */}
                  <div className="bg-red-900/20 border border-red-500/30 rounded-lg p-3 w-full">
                    <p className="text-xs text-red-400 text-center">
                      Important: Send only {amount} SOL. Any other amount may result in processing errors.
                    </p>
                  </div>

                  <div className="w-full text-center">
                    <Button
                      onClick={() => setMixStage("form")}
                      variant="outline"
                      className="border-primary-cyan text-primary-cyan hover:bg-primary-cyan/10"
                    >
                      Back to Form
                    </Button>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Status Console - Desktop Only */}
          <div className="hidden lg:block">
            <Card className="bg-muted-dark border-muted-darker cyber-border h-full">
              <CardHeader>
                <CardTitle className="text-2xl text-primary-cyan glow-text">Status Console</CardTitle>
              </CardHeader>
              <CardContent>
                <TerminalConsole isProcessing={isProcessing} waitingDeposit={waitingDeposit} amount={amount} />

                <div className="mt-6 p-4 bg-muted-darker/50 rounded-md border border-primary-cyan/20">
                  <h3 className="text-sm font-bold text-primary-cyan mb-2">Security Notice</h3>
                  <p className="text-xs text-gray-400">
                    All mixing operations are performed on the Solana blockchain. Your transaction will be completely
                    anonymous and untraceable after the selected delay period.
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </main>
  )
}
